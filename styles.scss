$colors: (
    primary: (33, 150, 243),
    grey: (158, 158, 158)
);

$breakpoints: (
    sm: 585,
    md: 760,
    lg: 991,
    xl: 1200,
    2xl: 1500,
);

$displays: block, flex, grid, inline-flex, inline-grid, none;
$spaces: (
    l: left,
    r: right,
    t: top,
    b: bottom
);

$layouts: (
    m: margin,
    p: padding
);
$positions: static, relative, absolute, fixed;
$positions-values: left, right, bottom, top;

:root {
    --tx-opacity: 1;
    --border-opacity: 1;
    --bg-opacity: 1;
    --app-height: 100vh;
}

@mixin classes($key: "") {
    @for $i from 0 through 10 {
        $opacity: #{calc($i / 10)};
        $k: #{$key}-#{$i};

        .tx-opacity#{$k} {
            --tx-opacity: #{$opacity} !important;
        }

        .opacity#{$k} {
            opacity: #{$opacity} !important;
        }

        .border-opacity#{$k} {
            --border-opacity: #{$opacity} !important;
        }

        .scale#{$k} {
            transform: scale($i);
        }
    }

    @for $i from 0 through 9 {
        $k: #{$key}-#{$i};
        $condition: $i != 0 and $i < 7 and $key == "";
        $v: $i * 0.25;

        @if($i > 4) {
            $v: $v + (($i - 4) * 0.25);
        }

        @each $lName,
        $lValue in $layouts {

            @each $name,
            $value in $spaces {
                .#{$lName}#{$name}#{$k} {
                    #{$lValue}-#{$value}: #{$v}rem !important;
                }
                @if($condition) {
                    .#{$lName}e#{$name}#{$k} {
                        #{$lValue}-#{$value}: #{$v}em !important;
                    }
    
                    @if($lName =="m") {
                        .-#{$lName}e#{$name}#{$k} {
                            #{$lValue}-#{$value}: -#{$v}em !important;
                        }
                    }
                }
            }

            .#{$lName}#{$k} {
                #{$lValue}: #{$v}rem !important;
            }

            

            .#{$lName}x#{$k} {
                @extend .#{$lName}l#{$k}, .#{$lName}r#{$k};
            }
            .#{$lName}y#{$k} {
                @extend .#{$lName}t#{$k}, .#{$lName}b#{$k};
            }
            @if($condition) {
                .#{$lName}xe#{$k} {
                    @extend .#{$lName}el#{$k}, .#{$lName}er#{$k};
                }
                .#{$lName}ye#{$k} {
                    @extend .#{$lName}et#{$k}, .#{$lName}eb#{$k};
                }
                @if($lName =="m") {
                    .-#{$lName}xe#{$k} {
                        @extend .-#{$lName}el#{$k}, .-#{$lName}er#{$k};
                    }
                    .-#{$lName}ye#{$k} {
                        @extend .-#{$lName}et#{$k}, .-#{$lName}eb#{$k};
                    }
                }
            }
        }

    }

    @for $i from 0 through 6 {
        .col#{$key}-#{$i} {
            grid-template-columns: repeat(#{$i}, 1fr);
        }

        .flex#{$key}-#{$i} {
            flex: #{$i};
        }
    }

    @each $display in $displays {
        .d#{$key}-#{$display} {
            display: $display !important;
        }
    }

    @each $position in $positions {
        .p#{$key}-#{$position} {
            position: $position !important;
        }
    }

    @each $k in $positions-values {
        .#{$k}#{$key}-0 {
            #{$k}: 0 !important;
        }

        .#{$k}#{$key}-50 {
            #{$k}: 50% !important;
        }

        .#{$k}#{$key}-100 {
            #{$k}: 100% !important;
        }
    }

    @each $n,
    $color in $colors {
        $name: #{$key}-#{$n};
        $clr: rgba($color, var(--tx-opacity));

        .tx#{$name} {
            color: $clr !important;
        }

        .bg#{$name} {
            background-color: $clr !important;
        }

        .border#{$name} {
            border: 1px solid $clr;
        }
    }

    .w#{$key}-100 {
        width: 100% !important;
    }

    .min-w#{$key}-100 {
        height: 100% !important;
    }

    .h#{$key}-screen {
        height: var(--app-height) !important;
    }

    .min-h#{$key}-screen {
        min-height: var(--app-height) !important;
    }

    .h#{$key}-100 {
        width: 100% !important;
    }

    .min-h#{$key}-100 {
        height: 100% !important;
    }

    .translate#{$key}-middle-y {
        transform: translateY(-50%) !important;
    }

    .translate#{$key}-middle-x {
        transform: translateX(-50%) !important;
    }

    .translate#{$key}-middle {
        transform: translate(-50%, -50%) !important;
    }

    .leading#{$key}-0 {
        line-height: 0 !important;
    }

    .leading#{$key}-1 {
        line-height: 1 !important;
    }

    .leading#{$key}-3 {
        line-height: 1.25 !important;
    }

    .leading#{$key}-4 {
        line-height: 1.5 !important;
    }

    .leading#{$key}-5 {
        line-height: 1.75 !important;
    }

    .ai#{$key}-start {
        align-items: flex-start !important;
    }

    .ai#{$key}-end {
        align-items: flex-end !important;
    }

    .ai#{$key}-center {
        align-items: center !important;
    }

    .jc#{$key}-start {
        justify-content: flex-start !important;
    }

    .jc#{$key}-end {
        justify-content: flex-end !important;
    }

    .jc#{$key}-center {
        justify-content: center !important;
    }

    .jc#{$key}-between {
        justify-content: space-between !important;
    }
    .flex#{$key}-column {
        flex-direction: column !important;
    }
    .flex#{$key}-row {
        flex-direction: row !important;
    }
}

.border {
    border: 1px solid;
}

@include classes();

@each $key,
$breakpoint in $breakpoints {
    @media (min-width: #{$breakpoint}px) {
        $k: -#{$key};
        @include classes($k);
    }
}